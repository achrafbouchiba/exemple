entity Categorie {
    nom String required	// Nom de la catégorie
    description String 	// Description de la catégorie
    position Integer required		// Position d'affichage
    etat Boolean		// Gérer l'affichage des catégories
	image ImageBlob
    creeLe LocalDate 	// Créé le
    creePar String 		// Créé par 
    modifieLe LocalDate 	// mise à jour le
    modifiePar String 		// mise à jour par 
}
entity SousCategorie {
    nom String required		// Designation sous catégorie
    description String	// Description sous catégorie
    position Integer required			// Position d'affichage
    etat Boolean 	// Gérer l'affichage des sous catégories
    image ImageBlob
	creeLe LocalDate 	// Créé le
    creePar String 		// Créé par 
    modifieLe LocalDate 	// mise à jour le
    modifiePar String 		// mise à jour par
}
entity Produit {
	reference String required pattern(/^([\S]{1,25}$)*/)	// Référence produit
    nom String required 		// Saisie manuelle par le back
    codeBarre Integer 			// Designation produit
    description String 		// Description produit
    etat Boolean required	// Produit Acti / Incatif
	marque String 			// Marque Produit  (Consommé de l'entitée PRODUITENUM)
	nature String			// Nature produit  (Consommé de l'entitée PRODUITENUM)
    stockMinimum Double			// Seuil min en Stock
	quantiteVenteMax Double			// Quantité de vente max
	horsStock Boolean		// Flag hors stock
	gereEnStock Boolean		// Produit gérer en stock ??
	datePremption LocalDate	// Date de préemption
    prixHT Double 			// Prix de vente HT unitaire
    tauxTVA Double				// Valeur TVA Appliquée
    prixTTC	Double				// Prix TTC
    sourceProduit	SourcePrd required		// Source du produit 
    rating	String	pattern(/^[1-5]$/) 	// Score du produit 1-5
	remise	Double			// Remise promo / Produit
    image ImageBlob
	creeLe LocalDate 		// Créé le
    creePar String 			// Créé par 
    modifieLe LocalDate 		// mise à jour le
    modifiePar String 			// mise à jour par
}
enum SourcePrd{
	Locale, Externe
}
entity ProdEnumeration{
	type	ProdEnum
    nom		String
}
enum ProdEnum {
	Marque, Classe, Nature, Collection
}
entity ProduitUnite {
    unite	String
}

entity Stock {
	stockPhysique	Double			// Quantité Physique
    stockDisponible Double 			// Qté Disponible à la vente
	stockReserve Double			// Qté en commande
	stockCommande Double			// Qté en commande confirmée par l'administrateur
    derniereEntre LocalDate	// Date d'entrée en stock
    derniereSortie LocalDate	// Date dernière sortie de stock
    alerteStock Boolean			// Alerte stock minimum (Stock disponible - Qté limite prod <= 0)
    creeLe LocalDate 		// Créé le
    creePar String 			// Créé par 
    modifieLe LocalDate 		// mise à jour le
    modifiePar String 			// mise à jour par 
}

entity MouvementStock {
	type TypeMvt		// Type mouvement stock 
    date LocalDate		// Dat mouvement (il peut aussi hériter la date de la livraison)
    sens Integer		// 1: Entrée stock || -1: Sortie Stock ou Commande
    quantite Double			// Qunatité entré ou sortie (valeur négative ou positive)
    creeLe LocalDate 	// Créé le
    creePar String 		// Créé par 
    modifieLe LocalDate 	// mise à jour le
    modifiePar String 		// mise à jour par 
}
enum TypeMvt {
	Stock, Commande
}

entity Client {
    civilite Civilite required		// M. ou Mme.
    nom String required			// Nom Client
    prenom String required		// Prénom Client
	dateDeNaissance LocalDate required	// Date de naissance 
    email String required pattern(/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/)			// Adresse email principale
    mobile Integer required			// Tél. Mobile principale du compte
    reglement RegMod				// Mode réglement préféré
    etat Boolean			// Définir le client actif ou inactif
    derniereVisite LocalDate		// Dernière visite
    totalAchat Double		// Montant total de toutes les commandes
	categorie	CatClient required
	pointsFidelite	Integer			// Nombre de points de fidélité cumulés
    creeLe LocalDate 		// Créé le
    creePar String 			// Créé par 
    modifieLe LocalDate 		// mise à jour le
    modifiePar String 			// mise à jour par
}
enum Civilite {
	M, Mme
}
enum RegMod {
	Cartebancaire, Cash, Cheque
}
enum CatClient {
	Silver, Gold, Platinium
}
entity Adresse {
    principale Boolean 	// Adresse par défaut du client Check box
    nom String required		// Nom du la personne a livrer (Par defaut Nom Client)
    prenom String required	// Nom du la personne a livrer (Par defaut prenom Client)
	adresseLigne1 String required 		// 1ere Ligne d'adresse
    gouvernorat String required	// Selection du Gouvernorat
    ville String 		// Selection de la ville
    localite String 	// Selection de la cité (Localité)
    indication String 	// Description de l'adresse : Indications aux livreurs
    telephone Integer		// N. Tel pour cette livraison 
    mobile Integer	// N. Tel mobile pour cette livraison (par défaut le mobile client)
    creeLe LocalDate 	// Créé le
    creePar String 		// Créé par 
    modifieLe LocalDate 	// mise à jour le
    modifiePar String 		// mise à jour par
}
entity GestionFidelite{
	nom String required
	points Integer required
    valeur Double required
    clientsilvermin Integer required
    clientsilvermax Integer required
    clientgoldmin Integer required
    clientgoldmax Integer required
    clientpremiummin Integer required
    clientpremiummax Integer required
	devise	Devise
    etat Boolean
    creeLe LocalDate 	// Créé le
    creePar String 		// Créé par 
    modifieLe LocalDate 	// mise à jour le
    modifiePar String    
}
enum Devise {
	TND, EUR, USD
} 
entity Commande {
    reference String pattern(/^[a-zA-Z0-9]{0,12}$/)		// Référence de la commande
    date LocalDate			// Date de la commande
    statut StatCmd			// Le statut de la commande a notifier
    naturePiece NaturePiece 	// Le type du document qui change suivant une action  
    totalHT Double				// Valeur totale HT
    totalTVA Double			// Valeur totale TVA
    totalRemise Double			// Valeur totale remise
    totTTC Double			// Valeur totale TTC
	zone	String					// Nom de la zone
	dateLivraison LocalDate	// Date de livraison
    creeLe LocalDate 	// Créé le
    creePar String 		// Créé par 
    modifieLe LocalDate 	// mise à jour le
    modifiePar String 		// mise à jour par
}
enum StatCmd {
	Commande, Annulee, Confirmed, Preparation, Livraison, Livree
}
enum NaturePiece {	
	Commande, Confcommande, Livraison
}
entity CommandeLignes {
    quantite Double			// Quantité produit commandée
    prixHT Double		// Prix unitaire HT
    tva Double		// Valeur unit TVA
    prixTTC Double		// Prix total TTC 
    creeLe LocalDate 	// Créé le
    creePar String 		// Créé par 
    modifieLe LocalDate 	// mise à jour le
    modifiePar String 		// mise à jour par
}
entity Zone {
    nom String 			// Nom de la zone créée 
    creeLe LocalDate 	// Créé le
    creePar String 		// Créé par 
    modifieLe LocalDate 	// mise à jour le
    modifiePar String 		// mise à jour par
}
entity Livraison {	// Au moment de la création d'une nouvelle zone
					// il faut automatiquement alimenter cette table 
	categorieClient CatClient	// Catégorie client : Silver / Cold / Platinium
	intervalValeur Double	// Interval valeur commande
    frais Double			// Cout livraison
	creeLe LocalDate 	// Créé le
    creePar String 		// Créé par 
    modifieLe LocalDate 	// mise à jour le
    modifiePar String 		// mise à jour par
}

entity CodePostaux {
    gouvernorat String 
    ville String 
    localite String 
    codePostal Integer
	zone String
    modifieLe LocalDate 	// mise à jour le
    modifiePar String 		// mise à jour par
}

entity Remise {
	categorieClient CatClient
	prix	Double		// Prix Unitaire de base
	remise	Double		// Remise Profil Client 
    cumulable	Boolean		// Remise cumulable : remise catégorie + Remise promo ? 
    debutPromo	LocalDate	// Date début promo
    finPromo		LocalDate	// Date fin promo
	etat	Boolean				// Actif / Inactif
    creeLe LocalDate 		// Créé le
    creePar String 			// Créé par 
    modifieLe LocalDate 		// mise à jour le
    modifiePar String 			// mise à jour par    
}


relationship OneToMany {
Categorie 			to SousCategorie{Categorie(nom)},
SousCategorie 		to Produit{SousCategorie(nom)},
ProduitUnite		to Produit{unite(unite)},
Produit 			to Stock{refProduit(reference)},
Categorie 			to Stock{idCategorie(nom)},
SousCategorie 		to Stock{idSousCategorie(nom)},
Produit 			to MouvementStock{refProduit(reference)},
Commande 			to MouvementStock{refCommande(reference)},
Client 				to Adresse{client(id)},
Zone 				to Adresse{zone(nom)},
CodePostaux			to Adresse{codePostal(codePostal)},
Client				to Commande{idClient(id)},
Adresse				to Commande{idAdresse(id)},
Commande			to CommandeLignes{refCommande(reference)},
Produit				to CommandeLignes{refProduit(reference)},
Zone				to Livraison{zone(nom)},
//Zone				to CodePostaux{zone(nom)},
Produit				to Remise{refProduit(reference)},
SousCategorie		to Remise{sousCategorie(nom)},
Categorie			to Remise{categorie(nom)}
}

dto all with mapstruct except ProdEnumeration
service * with serviceClass except ProdEnumeration
